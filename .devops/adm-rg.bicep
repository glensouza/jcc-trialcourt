param env string
param siteId string
param uniqueMod string
param cmLocation string = resourceGroup().location
param siteFarmId string

var appResourceGroup = '${env}-ctcms-df${siteFarmId}-app-rg'
var appService = '${env}-ctcms-ct${siteId}-app${uniqueMod}'
var cDNProfileFrontDoorOriginGroup1 = 'df${siteFarmId}-ct${siteId}-fd-orggrp'
var cDNProfileFrontDoorSecurityPolicy1 = '${env}fdsecpol'
var cDNProfileFrontDoorOriginGroupOrigin1 = 'df${siteFarmId}-ct${siteId}-fd-origin'
var envFrontDoorName = '${env}-ctcms-fd'
var cDNProfileFrontDoorEndpoint1 = 'df${siteFarmId}-ct${siteId}-fd-endpoint'
var cDNProfileFrontDoorEndpointsRoute1 = 'df${siteFarmId}-ct${siteId}-route'
var fdWafPolicy = '${env}wafpol1'



resource envFrontDoor 'Microsoft.Cdn/profiles@2021-06-01' existing = {
  name: envFrontDoorName
}

resource networkFrontDoorWebApplicationFirewallPolicy1 'Microsoft.Network/FrontDoorWebApplicationFirewallPolicies@2020-11-01' existing = {
  name: fdWafPolicy
}

resource cDNProfileFrontDoor1_cDNProfileFrontDoorEndpoint1 'Microsoft.Cdn/profiles/afdEndpoints@2021-06-01' = {
  parent: envFrontDoor
  name: cDNProfileFrontDoorEndpoint1
  location: 'global'
  properties: {
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    enabledState: 'Enabled'
  }
}

resource cDNProfileFrontDoor1_cDNProfileFrontDoorOriginGroup1 'Microsoft.Cdn/profiles/originGroups@2021-06-01' = {
  parent: envFrontDoor
  name: cDNProfileFrontDoorOriginGroup1
  properties: {
    healthProbeSettings: {
      probeIntervalInSeconds: 100
      probePath: '/'
      probeProtocol: 'Https'
      probeRequestType: 'HEAD'
    }
    loadBalancingSettings: {
      additionalLatencyInMilliseconds: 50
      sampleSize: 4
      successfulSamplesRequired: 3
    }
    sessionAffinityState: 'Enabled'
  }
}

resource cDNProfileFrontDoor1_cDNProfileFrontDoorSecurityPolicy1 'Microsoft.Cdn/profiles/securityPolicies@2021-06-01' = {
  parent: envFrontDoor
  name: cDNProfileFrontDoorSecurityPolicy1
  properties: {
    parameters: {
      associations: [
        {
          domains: [
            {
              id: cDNProfileFrontDoor1_cDNProfileFrontDoorEndpoint1.id
            }
          ]
          patternsToMatch: [
            '/*'
          ]
        }
      ]
      type: 'WebApplicationFirewall'
      wafPolicy: {
        id: networkFrontDoorWebApplicationFirewallPolicy1.id
      }
    }
  }
}

resource cDNProfileFrontDoor1_cDNProfileFrontDoorEndpoint1_cDNProfileFrontDoorEndpointsRoute1 'Microsoft.Cdn/profiles/afdEndpoints/routes@2021-06-01' = {
  parent: cDNProfileFrontDoor1_cDNProfileFrontDoorEndpoint1
  name: cDNProfileFrontDoorEndpointsRoute1
  properties: {
    cacheConfiguration: {
      compressionSettings: {
        contentTypesToCompress: []
        isCompressionEnabled: false
      }
      queryStringCachingBehavior: 'IgnoreQueryString'
    }
    customDomains: []
    enabledState: 'Enabled'
    forwardingProtocol: 'HttpsOnly'
    httpsRedirect: 'Enabled'
    linkToDefaultDomain: 'Enabled'
    originGroup: {
      id: cDNProfileFrontDoor1_cDNProfileFrontDoorOriginGroup1.id
    }
    originPath: '/'
    patternsToMatch: []
    ruleSets: []
    supportedProtocols: []
  }
  dependsOn: [
    fdOrigin
  ]
}

resource fdOrigin 'Microsoft.Cdn/profiles/originGroups/origins@2021-06-01' = {
  parent: cDNProfileFrontDoor1_cDNProfileFrontDoorOriginGroup1
  name: cDNProfileFrontDoorOriginGroupOrigin1 
  properties: {
    enabledState: 'Enabled'
    enforceCertificateNameCheck: true
    hostName: '${env}-ctcms-ct${siteId}-app${uniqueMod}.azurewebsites.net'
    httpPort: 80
    httpsPort: 443
    originHostHeader: '${env}-ctcms-ct${siteId}-app${uniqueMod}.azurewebsites.net'
    priority: 1
    sharedPrivateLinkResource: {
      groupId: 'sites'
      privateLink: {
        id: resourceId(appResourceGroup, 'Microsoft.Web/sites', appService)
      }
      privateLinkLocation: cmLocation
      requestMessage: 'AutomationRequest'
    }
    weight: 100
  }
}
