# Docker image, Azure Container Registry, and Azure Web App
# 1. Test the code
#    a. On Pull Requests, and
#    b. Commits to develop, stage, master
# 2. Build a Docker image, push it to an Azure Container Registry.
#    a. On commits to develop, stage, master
# 3. Deploy it to an Azure Web App.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - develop
  - stage
  - master

resources:
  - repo: self

name: $(Build.BuildId)

variables:
  dockerRegistryServiceConnection: '3f015a0b-e8e0-41a5-887c-d04efab1abd1'
  imageRepository: 'build/trialcourt/$(Build.SourceBranchName)'
  containerRegistry: 'devopswebcourtsnp.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/.devops/drupal-nginx-fpm/0.6-devops/Dockerfile'
  tag: 'build_$(Build.BuildId)-$(Build.SourceVersion)'
  phpVersion: 7.4
  location: 'West US 3'
  templateFile: './.devops/app-service.bicep'

  #TODO: inside foreach
  resourceGroupName: 'nprd-ctcms-df1-app-rg'

  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    deploymentSlot: 'production'
    azureServiceConnection: 'DevOps Web Service Non-Prod'
  ${{ else }}:
    deploymentSlot: 'production'
    azureServiceConnection: 'TODO'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
   - stage: Manifest
     displayName: Manifest
     jobs:
       - job: ReadManifest
         displayName: Read Manifest File
         pool:
           vmImage: $(vmImageName)
         steps:
           - script: |
               SITES = $(jq .sites ./manifest.json)
               echo "${SITES}"

 #  - ${{ each webApp in parameters.webApps }}:
 #    - task: AzureRmWebAppDeployment@4
 #      inputs:
 #        ConnectionType: 'AzureRM'
 #        azureSubscription: 'Azure-VSE-Subscription'
 #        appType: 'webAppContainer'
 #        WebAppName: '${{ webApp }}'
 #        DockerNamespace: 'registrynamespace'
 #        DockerRepository: 'image'
 #        DockerImageTag: 'latest'


#  - stage: Test
#    displayName: Test
#    jobs:
#      - job: Compile
#        displayName: Compile code
#        pool:
#          vmImage: $(vmImageName)
#        steps:
#          - script: |
#              sudo update-alternatives --set php /usr/bin/php$(phpVersion)
#              sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
#              sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
#              sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
#              sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
#              php -version
#            displayName: 'Use PHP version $(phpVersion)'
#          - script: composer install --no-interaction --prefer-dist
#            displayName: 'Composer install'
#      - job: Analyze
#        displayName: Analyze code
#        pool:
#          vmImage: $(vmImageName)
#        steps:
#          - script: composer -n lint
#            displayName: 'Lint php for syntax errors'
#          - script: composer -n code-sniff
#            displayName: 'Check coding standards'
#          - script: composer -n unit-test
#            displayName: 'Run unit tests'

#  - stage: Build
#    displayName: Build
#    dependsOn: Test
#    condition: and(succeeded('Test'), ne(variables['Build.SourceBranchName'], 'merge'))
#    jobs:
#      - job: Build
#        displayName: Build image
#        pool:
#          vmImage: $(vmImageName)
#        steps:
#          - task: Docker@2
#            displayName: Build
#            inputs:
#              command: build
#              containerRegistry: $(dockerRegistryServiceConnection)
#              repository: $(imageRepository)
#              dockerfile: $(dockerfilePath)
#              tags: |
#                latest
#                $(tag)
#              arguments: --label buildtype=nightly --build-arg GIT_BRANCH=$(Build.SourceBranchName)
#          - task: Docker@2
#            displayName: Push to registry
#            inputs:
#              command: push
#              containerRegistry: $(dockerRegistryServiceConnection)
#              repository: $(imageRepository)
#              tags: |
#                latest
#                $(tag)


#  - stage: Infrastructure
#    displayName: Infrastructure
##    dependsOn: Test
##    condition: succeeded('Test')
#    jobs:
#      - job: Provision
#        displayName: Provision App Service
#        pool:
#          vmImage: $(vmImageName)
#        steps:
#          - task: AzureResourceManagerTemplateDeployment@3
#            inputs:
#              deploymentScope: 'Resource Group'
#              azureResourceManagerConnection: '$(azureServiceConnection)'
#              action: 'Create Or Update Resource Group'
#              resourceGroupName: '$(resourceGroupName)'
#              location: '$(location)'
#              templateLocation: 'Linked artifact'
#              csmFile: '$(templateFile)'
#              #overrideParameters: '-storageAccountType Standard_LRS'
#              deploymentMode: 'Incremental'
#              deploymentName: 'DeployPipelineTemplate-$(Build.BuildId)'

# Read a manifest file
  # alameda = site1
  # sf = site2
  # tehama =

# loop through the sites

   # HOLD:
   # Separate pipeline ((get from Rob e-court))
   # backup the database of the site
   # backup the storage file of the site

   # Run Bicep
    # (waiting on Kyle for template /
    # waiting @Glen on sample code)
   # if app service exists
      # deploy
   # else
      # create the app service
   # ssh to the server
    # run post deployment db updates
    # config updates

#  - stage: Deploy
#    displayName: Deploy
#    dependsOn: Infrastructure
#    condition: succeeded('Infrastructure')
#    jobs:
#      - job: Deploy
#        displayName: Deploy to App Service
#        pool:
#          vmImage: $(vmImageName)
#        steps:
#          - task: AzureWebAppContainer@1
#            inputs:
#              azureSubscription: 'DevOps Web Service Non-Prod'
#              appName: 'nprd-ctcms-ct007-app'
#              resourceGroupName: 'nprd-ctcms-df1-app-rg'
#              containers: '$(containerRegistry)/build/trialcourt/master:latest'
